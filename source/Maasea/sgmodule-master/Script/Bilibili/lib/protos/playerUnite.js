// @generated by protobuf-ts 2.9.0 with parameter output_javascript_es2019
// @generated from protobuf file "protos/playerUnite.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = { text: "", link: "", reportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string link */ 2:
                    message.link = reader.string();
                    break;
                case /* map<string, string> report_params */ 3:
                    this.binaryReadMap3(message.reportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Button.report_params");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string link = 2; */
        if (message.link !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.link);
        /* map<string, string> report_params = 3; */
        for (let k of Object.keys(message.reportParams))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.reportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType {
    constructor() {
        super("Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* Button button */ 2:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* Button button = 2; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QnTrialInfo$Type extends MessageType {
    constructor() {
        super("QnTrialInfo", [
            { no: 1, name: "trial_able", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "remaining_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_toast", kind: "message", T: () => Toast },
            { no: 6, name: "end_toast", kind: "message", T: () => Toast },
            { no: 8, name: "quality_open_tip_btn", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = { trialAble: false, remainingTimes: 0, start: 0, timeLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_able */ 1:
                    message.trialAble = reader.bool();
                    break;
                case /* int32 remaining_times */ 2:
                    message.remainingTimes = reader.int32();
                    break;
                case /* int32 start */ 3:
                    message.start = reader.int32();
                    break;
                case /* int32 time_length */ 4:
                    message.timeLength = reader.int32();
                    break;
                case /* Toast start_toast */ 5:
                    message.startToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.startToast);
                    break;
                case /* Toast end_toast */ 6:
                    message.endToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.endToast);
                    break;
                case /* Button quality_open_tip_btn */ 8:
                    message.qualityOpenTipBtn = Button.internalBinaryRead(reader, reader.uint32(), options, message.qualityOpenTipBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool trial_able = 1; */
        if (message.trialAble !== false)
            writer.tag(1, WireType.Varint).bool(message.trialAble);
        /* int32 remaining_times = 2; */
        if (message.remainingTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingTimes);
        /* int32 start = 3; */
        if (message.start !== 0)
            writer.tag(3, WireType.Varint).int32(message.start);
        /* int32 time_length = 4; */
        if (message.timeLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeLength);
        /* Toast start_toast = 5; */
        if (message.startToast)
            Toast.internalBinaryWrite(message.startToast, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Toast end_toast = 6; */
        if (message.endToast)
            Toast.internalBinaryWrite(message.endToast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Button quality_open_tip_btn = 8; */
        if (message.qualityOpenTipBtn)
            Button.internalBinaryWrite(message.qualityOpenTipBtn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QnTrialInfo
 */
export const QnTrialInfo = new QnTrialInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUnite$Type extends MessageType {
    constructor() {
        super("PlayerUnite", [
            { no: 7, name: "qn_trial_info", kind: "message", T: () => QnTrialInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QnTrialInfo qn_trial_info */ 7:
                    message.qnTrialInfo = QnTrialInfo.internalBinaryRead(reader, reader.uint32(), options, message.qnTrialInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QnTrialInfo qn_trial_info = 7; */
        if (message.qnTrialInfo)
            QnTrialInfo.internalBinaryWrite(message.qnTrialInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerUnite
 */
export const PlayerUnite = new PlayerUnite$Type();
