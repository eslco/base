// @generated by protobuf-ts 2.9.0 with parameter output_javascript_es2019
// @generated from protobuf file "protos/dmView.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class CommandDm$Type extends MessageType {
    constructor() {
        super("CommandDm", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "ctime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "mtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "idStr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, oid: 0n, mid: 0n, command: "", content: "", progress: 0, ctime: "", mtime: "", extra: "", idStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 3:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string command */ 4:
                    message.command = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* int32 progress */ 6:
                    message.progress = reader.int32();
                    break;
                case /* string ctime */ 7:
                    message.ctime = reader.string();
                    break;
                case /* string mtime */ 8:
                    message.mtime = reader.string();
                    break;
                case /* string extra */ 9:
                    message.extra = reader.string();
                    break;
                case /* string idStr */ 10:
                    message.idStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 oid = 2; */
        if (message.oid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 mid = 3; */
        if (message.mid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.mid);
        /* string command = 4; */
        if (message.command !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.command);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* int32 progress = 6; */
        if (message.progress !== 0)
            writer.tag(6, WireType.Varint).int32(message.progress);
        /* string ctime = 7; */
        if (message.ctime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ctime);
        /* string mtime = 8; */
        if (message.mtime !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.mtime);
        /* string extra = 9; */
        if (message.extra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.extra);
        /* string idStr = 10; */
        if (message.idStr !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.idStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommandDm
 */
export const CommandDm = new CommandDm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmView$Type extends MessageType {
    constructor() {
        super("DmView", [
            { no: 1, name: "commandDms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommandDm }
        ]);
    }
    create(value) {
        const message = { commandDms: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CommandDm commandDms */ 1:
                    message.commandDms.push(CommandDm.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated CommandDm commandDms = 1; */
        for (let i = 0; i < message.commandDms.length; i++)
            CommandDm.internalBinaryWrite(message.commandDms[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DmView
 */
export const DmView = new DmView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DmViewReply$Type extends MessageType {
    constructor() {
        super("DmViewReply", [
            { no: 22, name: "dmView", kind: "message", T: () => DmView }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DmView dmView */ 22:
                    message.dmView = DmView.internalBinaryRead(reader, reader.uint32(), options, message.dmView);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* DmView dmView = 22; */
        if (message.dmView)
            DmView.internalBinaryWrite(message.dmView, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DmViewReply
 */
export const DmViewReply = new DmViewReply$Type();
