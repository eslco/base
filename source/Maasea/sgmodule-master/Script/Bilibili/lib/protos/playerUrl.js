// @generated by protobuf-ts 2.9.0 with parameter output_javascript_es2019
// @generated from protobuf file "protos/playerUrl.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 错误码
 *
 * @generated from protobuf enum PlayErr
 */
export var PlayErr;
(function (PlayErr) {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    PlayErr[PlayErr["NoErr"] = 0] = "NoErr";
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    PlayErr[PlayErr["WithMultiDeviceLoginErr"] = 1] = "WithMultiDeviceLoginErr";
})(PlayErr || (PlayErr = {}));
// @generated message type with reflection information, may provide speed optimized methods
class PlayView$Type extends MessageType {
    constructor() {
        super("PlayView", [
            { no: 1, name: "playURL", kind: "message", T: () => PlayURLReply }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayURLReply playURL */ 1:
                    message.playURL = PlayURLReply.internalBinaryRead(reader, reader.uint32(), options, message.playURL);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* PlayURLReply playURL = 1; */
        if (message.playURL)
            PlayURLReply.internalBinaryWrite(message.playURL, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayView
 */
export const PlayView = new PlayView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayURLReply$Type extends MessageType {
    constructor() {
        super("PlayURLReply", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "audios", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", timelength: 0n, videoCodecid: 0, videos: [], audios: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toBigInt();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated Stream videos */ 5:
                    message.videos.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated DashItem audios */ 6:
                    message.audios.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated Stream videos = 5; */
        for (let i = 0; i < message.videos.length; i++)
            Stream.internalBinaryWrite(message.videos[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated DashItem audios = 6; */
        for (let i = 0; i < message.audios.length; i++)
            DashItem.internalBinaryWrite(message.audios[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayURLReply
 */
export const PlayURLReply = new PlayURLReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType {
    constructor() {
        super("DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "baseURL", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0, baseURL: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, frameRate: "", widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string baseURL */ 2:
                    message.baseURL = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                case /* string widevine_pssh */ 9:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string baseURL = 2; */
        if (message.baseURL !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseURL);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        /* string widevine_pssh = 9; */
        if (message.widevinePssh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType {
    constructor() {
        super("Stream", [
            { no: 1, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", T: () => DashVideo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StreamInfo stream_info */ 1:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* DashVideo dash_video */ 2:
                    message.dashVideo = DashVideo.internalBinaryRead(reader, reader.uint32(), options, message.dashVideo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* StreamInfo stream_info = 1; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* DashVideo dash_video = 2; */
        if (message.dashVideo)
            DashVideo.internalBinaryWrite(message.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType {
    constructor() {
        super("StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "enum", T: () => ["PlayErr", PlayErr] },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", description: "", errCode: 0, needVip: false, needLogin: false, intact: false, noRexcode: false, attribute: 0n, newDescription: "", displayDesc: "", superscript: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* PlayErr err_code */ 4:
                    message.errCode = reader.int32();
                    break;
                case /* StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toBigInt();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* PlayErr err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).int32(message.errCode);
        /* StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0n)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType {
    constructor() {
        super("DashVideo", [
            { no: 1, name: "baseURL", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "audioId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { baseURL: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, audioId: 0, noRexcode: false, frameRate: "", width: 0, height: 0, widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string baseURL */ 1:
                    message.baseURL = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint32 audioId */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                case /* string widevine_pssh */ 12:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string baseURL = 1; */
        if (message.baseURL !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseURL);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audioId = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        /* string widevine_pssh = 12; */
        if (message.widevinePssh !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType {
    constructor() {
        super("StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", uri: "", msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
