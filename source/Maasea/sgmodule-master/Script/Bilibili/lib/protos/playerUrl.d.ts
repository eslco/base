// @generated by protobuf-ts 2.9.0 with parameter output_javascript_es2019
// @generated from protobuf file "protos/playerUrl.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PlayView
 */
export interface PlayView {
    /**
     * @generated from protobuf field: PlayURLReply playURL = 1;
     */
    playURL?: PlayURLReply;
}
/**
 * 视频地址-回复
 *
 * @generated from protobuf message PlayURLReply
 */
export interface PlayURLReply {
    /**
     * 清晰的
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 总时长(单位为ms)
     *
     * @generated from protobuf field: uint64 timelength = 3;
     */
    timelength: bigint;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 video_codecid = 4;
     */
    videoCodecid: number;
    /**
     * dash视频流
     *
     * @generated from protobuf field: repeated Stream videos = 5;
     */
    videos: Stream[];
    /**
     * dash伴音流
     *
     * @generated from protobuf field: repeated DashItem audios = 6;
     */
    audios: DashItem[];
}
/**
 * dash条目
 *
 * @generated from protobuf message DashItem
 */
export interface DashItem {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * 主线流
     *
     * @generated from protobuf field: string baseURL = 2;
     */
    baseURL: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 3;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 4;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 5;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 7;
     */
    size: bigint;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 8;
     */
    frameRate: string;
    /**
     * @generated from protobuf field: string widevine_pssh = 9;
     */
    widevinePssh: string;
}
/**
 * 视频流
 *
 * @generated from protobuf message Stream
 */
export interface Stream {
    /**
     * 元数据
     *
     * @generated from protobuf field: StreamInfo stream_info = 1;
     */
    streamInfo?: StreamInfo;
    /**
     * @generated from protobuf field: DashVideo dash_video = 2;
     */
    dashVideo?: DashVideo;
}
/**
 * 流媒体元数据
 *
 * @generated from protobuf message StreamInfo
 */
export interface StreamInfo {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 格式描述
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * 错误码
     *
     * @generated from protobuf field: PlayErr err_code = 4;
     */
    errCode: PlayErr;
    /**
     * 不满足条件信息
     *
     * @generated from protobuf field: StreamLimit limit = 5;
     */
    limit?: StreamLimit;
    /**
     * 是否需要vip
     *
     * @generated from protobuf field: bool need_vip = 6;
     */
    needVip: boolean;
    /**
     * 是否需要登录
     *
     * @generated from protobuf field: bool need_login = 7;
     */
    needLogin: boolean;
    /**
     * 是否完整
     *
     * @generated from protobuf field: bool intact = 8;
     */
    intact: boolean;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 9;
     */
    noRexcode: boolean;
    /**
     * 清晰度属性位
     *
     * @generated from protobuf field: int64 attribute = 10;
     */
    attribute: bigint;
    /**
     * 新版格式描述
     *
     * @generated from protobuf field: string new_description = 11;
     */
    newDescription: string;
    /**
     * 格式文字
     *
     * @generated from protobuf field: string display_desc = 12;
     */
    displayDesc: string;
    /**
     * 新版格式描述备注
     *
     * @generated from protobuf field: string superscript = 13;
     */
    superscript: string;
}
/**
 * dash视频流
 *
 * @generated from protobuf message DashVideo
 */
export interface DashVideo {
    /**
     * 主线流
     *
     * @generated from protobuf field: string baseURL = 1;
     */
    baseURL: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 2;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 3;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 4;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 5;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 6;
     */
    size: bigint;
    /**
     * 伴音质量id
     *
     * @generated from protobuf field: uint32 audioId = 7;
     */
    audioId: number;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 8;
     */
    noRexcode: boolean;
    /**
     * 码率
     *
     * @generated from protobuf field: string frame_rate = 9;
     */
    frameRate: string;
    /**
     * 宽度
     *
     * @generated from protobuf field: int32 width = 10;
     */
    width: number;
    /**
     * 高度
     *
     * @generated from protobuf field: int32 height = 11;
     */
    height: number;
    /**
     * @generated from protobuf field: string widevine_pssh = 12;
     */
    widevinePssh: string;
}
/**
 * 清晰度不满足条件信息
 *
 * @generated from protobuf message StreamLimit
 */
export interface StreamLimit {
    /**
     * 标题
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * 跳转地址
     *
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * 提示信息
     *
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
}
/**
 * 错误码
 *
 * @generated from protobuf enum PlayErr
 */
export declare enum PlayErr {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    NoErr = 0,
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    WithMultiDeviceLoginErr = 1
}
declare class PlayView$Type extends MessageType<PlayView> {
    constructor();
    create(value?: PartialMessage<PlayView>): PlayView;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayView): PlayView;
    internalBinaryWrite(message: PlayView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message PlayView
 */
export declare const PlayView: PlayView$Type;
declare class PlayURLReply$Type extends MessageType<PlayURLReply> {
    constructor();
    create(value?: PartialMessage<PlayURLReply>): PlayURLReply;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayURLReply): PlayURLReply;
    internalBinaryWrite(message: PlayURLReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message PlayURLReply
 */
export declare const PlayURLReply: PlayURLReply$Type;
declare class DashItem$Type extends MessageType<DashItem> {
    constructor();
    create(value?: PartialMessage<DashItem>): DashItem;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashItem): DashItem;
    internalBinaryWrite(message: DashItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message DashItem
 */
export declare const DashItem: DashItem$Type;
declare class Stream$Type extends MessageType<Stream> {
    constructor();
    create(value?: PartialMessage<Stream>): Stream;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stream): Stream;
    internalBinaryWrite(message: Stream, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Stream
 */
export declare const Stream: Stream$Type;
declare class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor();
    create(value?: PartialMessage<StreamInfo>): StreamInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo;
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message StreamInfo
 */
export declare const StreamInfo: StreamInfo$Type;
declare class DashVideo$Type extends MessageType<DashVideo> {
    constructor();
    create(value?: PartialMessage<DashVideo>): DashVideo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashVideo): DashVideo;
    internalBinaryWrite(message: DashVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message DashVideo
 */
export declare const DashVideo: DashVideo$Type;
declare class StreamLimit$Type extends MessageType<StreamLimit> {
    constructor();
    create(value?: PartialMessage<StreamLimit>): StreamLimit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLimit): StreamLimit;
    internalBinaryWrite(message: StreamLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message StreamLimit
 */
export declare const StreamLimit: StreamLimit$Type;
export {};
