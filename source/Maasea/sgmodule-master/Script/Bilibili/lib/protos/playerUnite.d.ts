// @generated by protobuf-ts 2.9.0 with parameter output_javascript_es2019
// @generated from protobuf file "protos/playerUnite.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 按钮组件
 *
 * @generated from protobuf message Button
 */
export interface Button {
    /**
     * 按钮文本
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 按钮跳转链接
     *
     * @generated from protobuf field: string link = 2;
     */
    link: string;
    /**
     * 埋点上报相关
     *
     * @generated from protobuf field: map<string, string> report_params = 3;
     */
    reportParams: {
        [key: string]: string;
    };
}
/**
 * Toast信息
 *
 * @generated from protobuf message Toast
 */
export interface Toast {
    /**
     * toast文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * toast按钮
     *
     * @generated from protobuf field: Button button = 2;
     */
    button?: Button;
}
/**
 * @generated from protobuf message QnTrialInfo
 */
export interface QnTrialInfo {
    /**
     * 能否试看高画质
     *
     * @generated from protobuf field: bool trial_able = 1;
     */
    trialAble: boolean;
    /**
     * @generated from protobuf field: int32 remaining_times = 2;
     */
    remainingTimes: number;
    /**
     * @generated from protobuf field: int32 start = 3;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 time_length = 4;
     */
    timeLength: number;
    /**
     * @generated from protobuf field: Toast start_toast = 5;
     */
    startToast?: Toast;
    /**
     * @generated from protobuf field: Toast end_toast = 6;
     */
    endToast?: Toast;
    /**
     * @generated from protobuf field: Button quality_open_tip_btn = 8;
     */
    qualityOpenTipBtn?: Button;
}
/**
 * @generated from protobuf message PlayerUnite
 */
export interface PlayerUnite {
    /**
     * @generated from protobuf field: QnTrialInfo qn_trial_info = 7;
     */
    qnTrialInfo?: QnTrialInfo;
}
declare class Button$Type extends MessageType<Button> {
    constructor();
    create(value?: PartialMessage<Button>): Button;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Button): Button;
    private binaryReadMap3;
    internalBinaryWrite(message: Button, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Button
 */
export declare const Button: Button$Type;
declare class Toast$Type extends MessageType<Toast> {
    constructor();
    create(value?: PartialMessage<Toast>): Toast;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Toast): Toast;
    internalBinaryWrite(message: Toast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Toast
 */
export declare const Toast: Toast$Type;
declare class QnTrialInfo$Type extends MessageType<QnTrialInfo> {
    constructor();
    create(value?: PartialMessage<QnTrialInfo>): QnTrialInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QnTrialInfo): QnTrialInfo;
    internalBinaryWrite(message: QnTrialInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message QnTrialInfo
 */
export declare const QnTrialInfo: QnTrialInfo$Type;
declare class PlayerUnite$Type extends MessageType<PlayerUnite> {
    constructor();
    create(value?: PartialMessage<PlayerUnite>): PlayerUnite;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUnite): PlayerUnite;
    internalBinaryWrite(message: PlayerUnite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message PlayerUnite
 */
export declare const PlayerUnite: PlayerUnite$Type;
export {};
